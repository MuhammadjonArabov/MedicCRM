# Generated by Django 4.2.16 on 2024-09-25 07:54

import apps.user.models
import ckeditor.fields
import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('common', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('phone', models.CharField(blank=True, max_length=50, unique=True, validators=[django.core.validators.RegexValidator(code=403, message="Telefon raqam noto'gri kiritildi", regex='^\\+998\\d{9}$')])),
                ('groups', models.ManyToManyField(blank=True, related_name='custom_user_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='custom_user_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', apps.user.models.PhoneManager()),
            ],
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Page Name')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Seller',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('phone', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(code=403, message="Telefon raqam noto'gri kiritildi", regex='^\\+998\\d{9}$')])),
                ('full_name', models.CharField(max_length=255, verbose_name='Full name')),
                ('address', models.CharField(max_length=255, verbose_name='Address')),
                ('image', models.ImageField(blank=True, null=True, upload_to='seller_images/', verbose_name='Image')),
                ('registered_address', models.FileField(blank=True, null=True, upload_to='registered_address/', verbose_name='Registered Address')),
                ('pinfl', models.FileField(blank=True, null=True, upload_to='pinfl/', verbose_name='PINFL')),
                ('passport_img', models.ImageField(blank=True, null=True, upload_to='passport_images/', verbose_name='Passport Image')),
                ('location_type', models.CharField(choices=[('online', 'Online'), ('offline', 'Offline'), ('hybrid', 'Hybrid')], default='offline', max_length=10)),
                ('status', models.CharField(choices=[('active', 'Active'), ('deactivate', 'Deactivate'), ('archived', 'Archived'), ('deleted', 'Deleted')], default='active', max_length=15)),
                ('personal_phone', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(code=403, message="Telefon raqam noto'gri kiritildi", regex='^\\+998\\d{9}$')])),
                ('page_permissions', models.ManyToManyField(blank=True, null=True, related_name='page', to='user.page', verbose_name='Page Permissions')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sellers', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Sms',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('message', models.TextField(verbose_name='Message')),
                ('sent_at', models.DateTimeField(auto_now_add=True, verbose_name='Sent At')),
                ('sellers', models.ManyToManyField(related_name='sms_messages', to='user.seller', verbose_name='Sellers')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SellerVisit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_visit', models.DateTimeField(blank=True, null=True, verbose_name='Last Visit')),
                ('visit_count', models.FloatField(default=0, verbose_name='Visit Count')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_visits', to='user.seller', verbose_name='User')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SellerPageVisitDuration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('duration', models.PositiveIntegerField(verbose_name='Duration')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visits', to='user.page', verbose_name='Page')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='page_visit_durations', to='user.seller', verbose_name='Seller')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SellerCustomerView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('viewed_at', models.DateTimeField(default=datetime.datetime.now, verbose_name='View At')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seller_customers', to='common.customer')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customer_views', to='user.seller')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SellerCoin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('action', models.CharField(choices=[('add_customer', 'Add customer'), ('sale', 'Sale')], default='add_customer', max_length=12)),
                ('coins', models.FloatField(verbose_name='Coins')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seller_coins', to='user.seller', verbose_name='Seller')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SellerButtonClick',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateField(verbose_name='Date')),
                ('count', models.IntegerField(default=0, verbose_name='Count')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='page_clicks', to='user.page', verbose_name='Page')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seller_clicks', to='user.seller', verbose_name='Seller')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Notifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=255, null=True, verbose_name='Title')),
                ('text', ckeditor.fields.RichTextField()),
                ('is_read', models.BooleanField(default=False)),
                ('link', models.CharField(blank=True, max_length=255, null=True, verbose_name='Link')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='user.seller', verbose_name='Seller')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ConfirmSale',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('seller_percentage', models.FloatField(verbose_name='Seller Percentage')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='confirmed_sales', to=settings.AUTH_USER_MODEL, verbose_name='Customer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.BooleanField(default=True)),
                ('text', ckeditor.fields.RichTextField()),
                ('audio', models.FileField(blank=True, null=True, upload_to='comments_audio/', verbose_name='Audio')),
                ('video', models.FileField(blank=True, null=True, upload_to='comments_video/', verbose_name='Video')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customer_comments', to='common.customer', verbose_name='Customer')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seller_comments', to='user.seller', verbose_name='Seller')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateTimeField(blank=True, null=True, verbose_name='Date')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('status', models.BooleanField(default=False, verbose_name='Status')),
                ('is_approved', models.BooleanField(default=False)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calendars', to='common.customer', verbose_name='Customer')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calendars', to='user.seller', verbose_name='Seller')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
